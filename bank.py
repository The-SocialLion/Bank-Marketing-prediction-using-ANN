# -*- coding: utf-8 -*-
"""Bank.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tMPdw2KcPL1QKwzoieGUrpqLRXAWg0Uf
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

df = pd.read_csv('bank.csv', delimiter = ';', quoting = 3)
df=df.dropna(how='any')
df

from sklearn.preprocessing import LabelEncoder
le1=LabelEncoder()
le2=LabelEncoder()
df['"age"']=le1.fit_transform(df['"age"'])
df['"job"']=le1.fit_transform(df['"job"'])
df['"marital"']=le1.fit_transform(df['"marital"'])
df['"education"']=le1.fit_transform(df['"education"'])
df['"default"']=le1.fit_transform(df['"default"'])
df['"housing"']=le1.fit_transform(df['"housing"'])
df['"loan"']=le1.fit_transform(df['"loan"'])
df['"contact"']=le1.fit_transform(df['"contact"'])
df['"month"']=le1.fit_transform(df['"month"'])
df['"day_of_week"']=le1.fit_transform(df['"day_of_week"'])
df['"duration"']=le1.fit_transform(df['"duration"'])
df['"campaign"']=le1.fit_transform(df['"campaign"'])
df['"pdays"']=le1.fit_transform(df['"pdays"'])
df['"previous"']=le1.fit_transform(df['"previous"'])
df['"poutcome"']=le1.fit_transform(df['"poutcome"'])
df['"emp.var.rate"']=le1.fit_transform(df['"emp.var.rate"'])
df['"cons.price.idx"']=le1.fit_transform(df['"cons.price.idx"'])
df['"cons.conf.idx"']=le1.fit_transform(df['"cons.conf.idx"'])
df['"euribor3m"']=le1.fit_transform(df['"euribor3m"'])
df['"nr.employed"']=le1.fit_transform(df['"nr.employed"'])
df['"y"']=le2.fit_transform(df['"y"'])
df

X=df.iloc[:,:-1].values
y=df.iloc[:,-1].values

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)

import tensorflow as tf

ann = tf.keras.models.Sequential()
ann.add(tf.keras.layers.Dense(units=30, activation='relu'))
ann.add(tf.keras.layers.Dense(units=30, activation='relu'))
ann.add(tf.keras.layers.Dense(units=1,activation='sigmoid'))

ann.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])
history=ann.fit(X_train, y_train, batch_size=15, epochs=150)
ann.save("Bank.h5")

plt.figure(0)
plt.plot(history.history['accuracy'], label='training accuracy')
plt.title('Accuracy')
plt.xlabel('epochs')
plt.ylabel('accuracy')
plt.legend()
plt.savefig('Accuracy.png')

plt.figure(1)
plt.plot(history.history['loss'], label='training loss')
plt.title('Loss')
plt.xlabel('epochs')
plt.ylabel('loss')
plt.legend()
plt.savefig('Loss.png')
print("Saved Model & Graph to disk")

y_pred = ann.predict(X_test)
y_pred=np.round(y_pred)
print(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))

from sklearn.metrics import confusion_matrix, accuracy_score
cm = confusion_matrix(y_test, y_pred)
print(cm)
accuracy_score(y_test, y_pred)